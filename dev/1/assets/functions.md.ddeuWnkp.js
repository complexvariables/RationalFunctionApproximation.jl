import{_ as l,C as p,c as r,o as h,aA as o,j as s,G as t,a as n,w as e}from"./chunks/framework.Dw9Ca4Bb.js";const G=JSON.parse('{"title":"Functions and types","description":"","frontmatter":{},"headers":[],"relativePath":"functions.md","filePath":"functions.md","lastUpdated":null}'),d={name:"functions.md"},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""};function N(z,i,O,U,q,K){const a=p("Badge");return h(),r("div",null,[i[108]||(i[108]=o('<h1 id="Functions-and-types" tabindex="-1">Functions and types <a class="header-anchor" href="#Functions-and-types" aria-label="Permalink to &quot;Functions and types {#Functions-and-types}&quot;">â€‹</a></h1><ul><li><a href="#RationalFunctionApproximation.Approximation"><code>RationalFunctionApproximation.Approximation</code></a></li><li><a href="#RationalFunctionApproximation.Barycentric"><code>RationalFunctionApproximation.Barycentric</code></a></li><li><a href="#RationalFunctionApproximation.Barycentric"><code>RationalFunctionApproximation.Barycentric</code></a></li><li><a href="#RationalFunctionApproximation.DiscretizedPath-Tuple{Union{ComplexRegions.AbstractCurve, ComplexRegions.AbstractPath}, AbstractVector}"><code>RationalFunctionApproximation.DiscretizedPath</code></a></li><li><a href="#RationalFunctionApproximation.RFIVector"><code>RationalFunctionApproximation.RFIVector</code></a></li><li><a href="#Base.collect"><code>Base.collect</code></a></li><li><a href="#Base.values-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"><code>Base.values</code></a></li><li><a href="#RationalFunctionApproximation.Res-Tuple{Function, Number}"><code>RationalFunctionApproximation.Res</code></a></li><li><a href="#RationalFunctionApproximation.aaa-Tuple{AbstractVector{&lt;:Number}, AbstractVector{&lt;:Number}}"><code>RationalFunctionApproximation.aaa</code></a></li><li><a href="#RationalFunctionApproximation.add_node!-Tuple{DiscretizedPath, Any}"><code>RationalFunctionApproximation.add_node!</code></a></li><li><a href="#RationalFunctionApproximation.approximate-Tuple{Function, ComplexRegions.AbstractRegion}"><code>RationalFunctionApproximation.approximate</code></a></li><li><a href="#RationalFunctionApproximation.check-Tuple{RationalFunctionApproximation.Approximation}"><code>RationalFunctionApproximation.check</code></a></li><li><a href="#RationalFunctionApproximation.convergenceplot-Tuple{Any}"><code>RationalFunctionApproximation.convergenceplot</code></a></li><li><a href="#RationalFunctionApproximation.decompose-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"><code>RationalFunctionApproximation.decompose</code></a></li><li><a href="#RationalFunctionApproximation.degree-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"><code>RationalFunctionApproximation.degree</code></a></li><li><a href="#RationalFunctionApproximation.degrees-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"><code>RationalFunctionApproximation.degrees</code></a></li><li><a href="#RationalFunctionApproximation.errorplot-Tuple{Any}"><code>RationalFunctionApproximation.errorplot</code></a></li><li><a href="#RationalFunctionApproximation.get_history-Union{Tuple{RationalFunctionApproximation.Approximation{T, S}}, Tuple{S}, Tuple{T}} where {T, S}"><code>RationalFunctionApproximation.get_history</code></a></li><li><a href="#RationalFunctionApproximation.minimax"><code>RationalFunctionApproximation.minimax</code></a></li><li><a href="#RationalFunctionApproximation.nodes-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"><code>RationalFunctionApproximation.nodes</code></a></li><li><a href="#RationalFunctionApproximation.poleplot-Tuple{Any}"><code>RationalFunctionApproximation.poleplot</code></a></li><li><a href="#RationalFunctionApproximation.poles-Union{Tuple{Barycentric{T}}, Tuple{T}} where T"><code>RationalFunctionApproximation.poles</code></a></li><li><a href="#RationalFunctionApproximation.poles-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"><code>RationalFunctionApproximation.poles</code></a></li><li><a href="#RationalFunctionApproximation.residues-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"><code>RationalFunctionApproximation.residues</code></a></li><li><a href="#RationalFunctionApproximation.rewind-Tuple{RationalFunctionApproximation.Approximation, Integer}"><code>RationalFunctionApproximation.rewind</code></a></li><li><a href="#RationalFunctionApproximation.roots-Tuple{Barycentric}"><code>RationalFunctionApproximation.roots</code></a></li><li><a href="#RationalFunctionApproximation.roots-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"><code>RationalFunctionApproximation.roots</code></a></li></ul>',2)),s("details",k,[s("summary",null,[i[0]||(i[0]=s("a",{id:"RationalFunctionApproximation.Approximation",href:"#RationalFunctionApproximation.Approximation"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.Approximation")],-1)),i[1]||(i[1]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Approximation (type)</span></span></code></pre></div><p>Approximation of a function on a domain.</p><p><strong>Fields</strong></p><ul><li><p><code>original</code>: the original function</p></li><li><p><code>domain</code>: the domain of the approximation</p></li><li><p><code>fun</code>: the barycentric representation of the approximation</p></li><li><p><code>allowed</code>: function to determine if a pole is allowed</p></li><li><p><code>prenodes</code>: the prenodes of the approximation</p></li><li><p><code>test_points</code>: test points where residual was computed</p></li><li><p><code>history</code>: all approximations in the iteration</p></li></ul>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[2]||(i[2]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/approximate.jl#L7-L20",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",c,[s("summary",null,[i[4]||(i[4]=s("a",{id:"RationalFunctionApproximation.Barycentric",href:"#RationalFunctionApproximation.Barycentric"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.Barycentric")],-1)),i[5]||(i[5]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Barycentric (type)</span></span></code></pre></div><p>Barycentric representation of a rational function.</p><p><strong>Fields</strong></p><ul><li><p><code>node</code>: the nodes of the rational function</p></li><li><p><code>value</code>: the values of the rational function</p></li><li><p><code>weight</code>: the weights of the rational function</p></li><li><p><code>wf</code>: the weighted values of the rational function</p></li><li><p><code>stats</code>: convergence statistics</p></li></ul>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[6]||(i[6]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/barycentric.jl#L2-L13",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s("details",u,[s("summary",null,[i[8]||(i[8]=s("a",{id:"RationalFunctionApproximation.Barycentric-2",href:"#RationalFunctionApproximation.Barycentric-2"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.Barycentric")],-1)),i[9]||(i[9]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Barycentric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, value, weight, wf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weight; stats</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Construct a <code>Barycentric</code> rational function.</p><p><strong>Arguments</strong></p><ul><li><p><code>node::Vector</code>: interpolation nodes</p></li><li><p><code>value::Vector</code>: values at the interpolation nodes</p></li><li><p><code>weight::Vector</code>: barycentric weights</p></li></ul><p><strong>Keywords</strong></p><ul><li><code>wf::Vector = value .* weight</code>: weights times values</li></ul><p><strong>Returns</strong></p><ul><li><code>::Barycentric</code>: a barycentric rational interpolating function</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Barycentric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Barycentric </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> with </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nodes and values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span></span></code></pre></div>`,10)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[10]||(i[10]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/barycentric.jl#L39-L64",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),s("details",g,[s("summary",null,[i[12]||(i[12]=s("a",{id:"RationalFunctionApproximation.DiscretizedPath-Tuple{Union{ComplexRegions.AbstractCurve, ComplexRegions.AbstractPath}, AbstractVector}",href:"#RationalFunctionApproximation.DiscretizedPath-Tuple{Union{ComplexRegions.AbstractCurve, ComplexRegions.AbstractPath}, AbstractVector}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.DiscretizedPath")],-1)),i[13]||(i[13]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[15]||(i[15]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscretizedPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path, s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscretizedPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path, n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Discretize a path, keeping the option of future making local refinements.</p><p><strong>Arguments</strong></p><ul><li><p><code>path</code>: a ComplexCurve or ComplexPath</p></li><li><p><code>s</code>: a vector of parameter values</p></li><li><p><code>n</code>: number of points to discretize the path</p></li></ul><p><strong>Keyword arguments</strong></p><ul><li><p><code>refinement</code>: number of refinements to make between consecutive points</p></li><li><p><code>maxpoints</code>: maximum number of points ever allowed</p></li></ul><p>See also <a href="/RationalFunctionApproximation.jl/dev/functions#Base.collect"><code>collect</code></a>, <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.add_node!-Tuple{DiscretizedPath, Any}"><code>add_node!</code></a>.</p>`,7)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[14]||(i[14]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/utils.jl#L34-L50",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),s("details",m,[s("summary",null,[i[16]||(i[16]=s("a",{id:"RationalFunctionApproximation.RFIVector",href:"#RationalFunctionApproximation.RFIVector"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.RFIVector")],-1)),i[17]||(i[17]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[19]||(i[19]=o('<p>Sequence of rational interpolants produced by an iteration.</p><p><strong>Fields</strong></p><ul><li><p><code>nodes</code>: vector of interpolation nodes</p></li><li><p><code>values</code>: vector of interpolation values</p></li><li><p><code>weights</code>: matrix of all weights (upper triangle)</p></li><li><p><code>len</code>: the number of nodes for each approximation</p></li><li><p><code>best</code>: the index of the best approximation</p></li></ul><p>See also: <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.approximate-Tuple{Function, ComplexRegions.AbstractRegion}"><code>approximate</code></a></p>',4)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[18]||(i[18]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L99-L110",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),s("details",y,[s("summary",null,[i[20]||(i[20]=s("a",{id:"Base.collect",href:"#Base.collect"},[s("span",{class:"jlbinding"},"Base.collect")],-1)),i[21]||(i[21]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[23]||(i[23]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscretizedPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, which</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Collect the points and parameters of a discretized path.</p><p><strong>Arguments</strong></p><ul><li><p><code>d</code>: a DiscretizedPath object</p></li><li><p><code>which</code>: return the nodes if :nodes, test points if :test, or all if :all</p></li></ul><p><strong>Returns</strong></p><ul><li>Tuple of two vectors: parameter values and points on the path</li></ul><p>See also <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.add_node!-Tuple{DiscretizedPath, Any}"><code>add_node!</code></a>, <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.DiscretizedPath-Tuple{Union{ComplexRegions.AbstractCurve, ComplexRegions.AbstractPath}, AbstractVector}"><code>DiscretizedPath</code></a>.</p>',7)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[22]||(i[22]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/utils.jl#L133-L146",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),s("details",E,[s("summary",null,[i[24]||(i[24]=s("a",{id:"Base.values-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}",href:"#Base.values-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"},[s("span",{class:"jlbinding"},"Base.values")],-1)),i[25]||(i[25]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[27]||(i[27]=s("p",null,[n("values(r) returns a vector of the nodal values of the rational interpolant "),s("code",null,"r"),n(".")],-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[26]||(i[26]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L11",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),s("details",F,[s("summary",null,[i[28]||(i[28]=s("a",{id:"RationalFunctionApproximation.Res-Tuple{Function, Number}",href:"#RationalFunctionApproximation.Res-Tuple{Function, Number}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.Res")],-1)),i[29]||(i[29]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[31]||(i[31]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r, z)</span></span></code></pre></div><p>Returns the residue of the rational function <code>r</code> at the point <code>z</code>.</p>',2)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[30]||(i[30]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L34-L38",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),s("details",f,[s("summary",null,[i[32]||(i[32]=s("a",{id:"RationalFunctionApproximation.aaa-Tuple{AbstractVector{<:Number}, AbstractVector{<:Number}}",href:"#RationalFunctionApproximation.aaa-Tuple{AbstractVector{<:Number}, AbstractVector{<:Number}}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.aaa")],-1)),i[33]||(i[33]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[35]||(i[35]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aaa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, z)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aaa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f)</span></span></code></pre></div><p>Adaptively compute a rational interpolant.</p><p><strong>Arguments</strong></p><p><strong>discrete mode</strong></p><ul><li><p><code>y::AbstractVector{&lt;:Number}</code>: values at nodes</p></li><li><p><code>z::AbstractVector{&lt;:Number}</code>: interpolation nodes</p></li></ul><p><strong>continuous mode</strong></p><ul><li><code>f::Function</code>: function to approximate on the interval [-1,1]</li></ul><p><strong>Keyword arguments</strong></p><ul><li><p><code>max_degree::Integer=150</code>: maximum numerator/denominator degree to use</p></li><li><p><code>float_type::Type=Float64</code>: floating point type to use for the computation</p></li><li><p><code>tol::Real=1000*eps(float_type)</code>: tolerance for stopping</p></li><li><p><code>stagnation::Integer=10</code>: number of iterations to determines stagnation</p></li><li><p><code>stats::Bool=false</code>: return convergence statistics</p></li></ul><p><strong>Returns</strong></p><ul><li><p><code>r::Barycentric</code>: the rational interpolant</p></li><li><p><code>stats::NamedTuple</code>: convergence statistics, if keyword <code>stats=true</code></p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1im</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aaa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z, y);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> degree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># both numerator and denominator</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element Vector{ComplexF64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6.272545090180361im</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9.43887775551102im</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.1022044088176353im</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4.909819639278557im</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1im</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Ï€</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.637151617496356e-15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0000000000000002im</span></span></code></pre></div><p>See also <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.approximate-Tuple{Function, ComplexRegions.AbstractRegion}"><code>approximate</code></a> for approximating a function on a curve or region.</p>`,14)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[34]||(i[34]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/aaa.jl#L8-L57",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),s("details",b,[s("summary",null,[i[36]||(i[36]=s("a",{id:"RationalFunctionApproximation.add_node!-Tuple{DiscretizedPath, Any}",href:"#RationalFunctionApproximation.add_node!-Tuple{DiscretizedPath, Any}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.add_node!")],-1)),i[37]||(i[37]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[39]||(i[39]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_node!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscretizedPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, idx)</span></span></code></pre></div><p>Add a new node to the discretization, and return the indexes of all affected points. The indexes are valid on the <code>points</code> and <code>params</code> fields.</p><p><strong>Arguments</strong></p><ul><li><p><code>d</code>: a DiscretizedPath object</p></li><li><p><code>idx</code>: a 2-element tuple, vector, or <code>CartesianIndex</code> into the <code>params</code> field. This identifies</p></li></ul><p>the point to be promoted to a node.</p><p><strong>Returns</strong></p><ul><li>A 2-element vector of <code>CartesianIndices</code> into the <code>params</code> and <code>points</code> fields.</li></ul><p>See also <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.DiscretizedPath-Tuple{Union{ComplexRegions.AbstractCurve, ComplexRegions.AbstractPath}, AbstractVector}"><code>DiscretizedPath</code></a>, <a href="/RationalFunctionApproximation.jl/dev/functions#Base.collect"><code>collect</code></a>.</p>',8)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[38]||(i[38]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/utils.jl#L79-L94",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),s("details",A,[s("summary",null,[i[40]||(i[40]=s("a",{id:"RationalFunctionApproximation.approximate-Tuple{Function, ComplexRegions.AbstractRegion}",href:"#RationalFunctionApproximation.approximate-Tuple{Function, ComplexRegions.AbstractRegion}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.approximate")],-1)),i[41]||(i[41]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[43]||(i[43]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">approximate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, domain)</span></span></code></pre></div><p>Adaptively compute a rational interpolant on a continuous or discrete domain.</p><p><strong>Arguments</strong></p><p><strong>Continuous domain</strong></p><ul><li><p><code>f::Function</code>: function to approximate</p></li><li><p><code>domain</code>: curve, path, or region from ComplexRegions</p></li></ul><p><strong>Discrete domain</strong></p><ul><li><p><code>f::Function</code>: function to approximate</p></li><li><p><code>z::AbstractVector</code>: point set on which to approximate</p></li></ul><p><strong>Keywords</strong></p><ul><li><p><code>max_iter::Integer=150</code>: maximum number of iterations on node addition</p></li><li><p><code>float_type::Type</code>: floating point type to use for the computationÂ¹</p></li><li><p><code>tol::Real=1000*eps(float_type)</code>: relative tolerance for stopping</p></li><li><p><code>allowed::Function</code>: function to determine if a pole is allowedÂ²</p></li><li><p><code>refinement::Integer=3</code>: number of test points between adjacent nodes (continuum only)</p></li><li><p><code>stagnation::Integer=20</code>: number of iterations to determine stagnation</p></li></ul><p>Â¹Default of <code>float_type</code> is the promotion of <code>float(1)</code> and the float type of the domain. Â²Default is to disallow poles on the curve or in the interior of a continuous domain, or to accept all poles on a discrete domain. Use <code>allowed=true</code> to allow all poles.</p><p><strong>Returns</strong></p><ul><li><code>r::Approximation</code>: the rational interpolant</li></ul><p>See also <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.Approximation"><code>Approximation</code></a>, <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.check-Tuple{RationalFunctionApproximation.Approximation}"><code>check</code></a>, <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.rewind-Tuple{RationalFunctionApproximation.Approximation, Integer}"><code>rewind</code></a>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tanh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> approximate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, unit_interval)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Barycentric{Float64, Float64} rational </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> of type (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) on the domain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path{Float64} with </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curve</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9999877116508015</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9999877116507956</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># accuracy over the domain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ Info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Max error is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.58e-13</span></span></code></pre></div>`,15)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[42]||(i[42]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/approximate.jl#L65-L108",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),s("details",x,[s("summary",null,[i[44]||(i[44]=s("a",{id:"RationalFunctionApproximation.check-Tuple{RationalFunctionApproximation.Approximation}",href:"#RationalFunctionApproximation.check-Tuple{RationalFunctionApproximation.Approximation}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.check")],-1)),i[45]||(i[45]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[47]||(i[47]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r; quiet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, prenodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check the accuracy of a rational approximation <code>r</code> on its domain. Returns the test points and the error at those points.</p><p><strong>Arguments</strong></p><ul><li><code>r::Approximation</code>: rational approximation</li></ul><p><strong>Keywords</strong></p><ul><li><p><code>quiet::Bool=false</code>: suppress @info output</p></li><li><p><code>prenodes::Bool=false</code>: return prenodes of the approximation as well</p></li></ul><p><strong>Returns</strong></p><ul><li><p><code>Ï„::Vector</code>: test points</p></li><li><p><code>err::Vector</code>: error at test points</p></li></ul><p>See also <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.approximate-Tuple{Function, ComplexRegions.AbstractRegion}"><code>approximate</code></a>.</p>',9)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[46]||(i[46]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/approximate.jl#L455-L472",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),s("details",C,[s("summary",null,[i[48]||(i[48]=s("a",{id:"RationalFunctionApproximation.convergenceplot-Tuple{Any}",href:"#RationalFunctionApproximation.convergenceplot-Tuple{Any}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.convergenceplot")],-1)),i[49]||(i[49]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[51]||(i[51]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convergenceplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)</span></span></code></pre></div><p>Plot the convergence history of a rational approximation.</p><p>Markers show the maximum error on (the boundary of) the domain as a function of the numerator/denominator degree. A red marker indicates that the approximation has disallowed poles in its domain. A gold halo highlights the best approximation.</p>',3)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[50]||(i[50]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/RationalFunctionApproximation.jl#L38-L44",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})]),s("details",R,[s("summary",null,[i[52]||(i[52]=s("a",{id:"RationalFunctionApproximation.decompose-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}",href:"#RationalFunctionApproximation.decompose-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.decompose")],-1)),i[53]||(i[53]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[55]||(i[55]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">decompose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)</span></span></code></pre></div><p>Return the roots, poles, and residues of the rational interpolant <code>r</code>.</p>',2)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[54]||(i[54]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L53-L57",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[54]})]),s("details",T,[s("summary",null,[i[56]||(i[56]=s("a",{id:"RationalFunctionApproximation.degree-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}",href:"#RationalFunctionApproximation.degree-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.degree")],-1)),i[57]||(i[57]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[59]||(i[59]=s("p",null,[n("degree(r) returns the degree of the denominator of the rational "),s("code",null,"r"),n(".")],-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[58]||(i[58]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L21",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[58]})]),s("details",j,[s("summary",null,[i[60]||(i[60]=s("a",{id:"RationalFunctionApproximation.degrees-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}",href:"#RationalFunctionApproximation.degrees-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.degrees")],-1)),i[61]||(i[61]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[63]||(i[63]=s("p",null,[n("degrees(r) returns the degrees of the numerator and denominator of the rational "),s("code",null,"r"),n(".")],-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[62]||(i[62]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[62]})]),s("details",_,[s("summary",null,[i[64]||(i[64]=s("a",{id:"RationalFunctionApproximation.errorplot-Tuple{Any}",href:"#RationalFunctionApproximation.errorplot-Tuple{Any}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.errorplot")],-1)),i[65]||(i[65]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[67]||(i[67]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">errorplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r; use_abs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot the pointwise error of an <code>Approximation</code> on (the boundary of) its domain. If the error is not real, then the real and imaginary parts are plotted separately, unless <code>use_abs=true</code>.</p>',2)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[66]||(i[66]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/RationalFunctionApproximation.jl#L49-L53",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[66]})]),s("details",v,[s("summary",null,[i[68]||(i[68]=s("a",{id:"RationalFunctionApproximation.get_history-Union{Tuple{RationalFunctionApproximation.Approximation{T, S}}, Tuple{S}, Tuple{T}} where {T, S}",href:"#RationalFunctionApproximation.get_history-Union{Tuple{RationalFunctionApproximation.Approximation{T, S}}, Tuple{S}, Tuple{T}} where {T, S}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.get_history")],-1)),i[69]||(i[69]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[71]||(i[71]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_history</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Approximation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Parse the convergence history of a rational approximation.</p><p><strong>Arguments</strong></p><ul><li><code>r::Approximation</code>: the approximation to get the history from</li></ul><p><strong>Returns</strong></p><ul><li><p><code>::Vector</code>: degrees of the approximations</p></li><li><p><code>::Vector</code>: estimated maximum errors of the approximations</p></li><li><p><code>::Vector{Vector}</code>: poles of the approximations</p></li><li><p><code>::Vector{Vector}</code>: allowed poles of the approximations</p></li><li><p><code>::Integer</code>: index of the best approximation</p></li></ul><p>See also <a href="/RationalFunctionApproximation.jl/dev/functions#RationalFunctionApproximation.convergenceplot-Tuple{Any}"><code>convergenceplot</code></a>.</p>',7)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[70]||(i[70]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/approximate.jl#L493-L507",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[70]})]),s("details",B,[s("summary",null,[i[72]||(i[72]=s("a",{id:"RationalFunctionApproximation.minimax",href:"#RationalFunctionApproximation.minimax"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.minimax")],-1)),i[73]||(i[73]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[75]||(i[75]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minimax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Barycentric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nsteps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minimax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Approximation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nsteps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute an approximately minimax rational approximation to a function <code>f</code> on the nodes of a given rational function in barycentric form. The returned approximation has the same type as the first input argument.</p><p>The <code>nsteps</code> argument controls the number of Lawson iterations. The default value is 20.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tanh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> approximate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, unit_interval, max_degree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># least-squares approximation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ Info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Max error is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.06e-02</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rÌ‚ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> minimax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rÌ‚);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ Info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Max error is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.40e-03</span></span></code></pre></div>`,5)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[74]||(i[74]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/lawson.jl#L28-L52",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[74]})]),s("details",D,[s("summary",null,[i[76]||(i[76]=s("a",{id:"RationalFunctionApproximation.nodes-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}",href:"#RationalFunctionApproximation.nodes-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.nodes")],-1)),i[77]||(i[77]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[79]||(i[79]=s("p",null,"nodes(r) returns a vector of the interpolation nodes of the rational interpolant.",-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[78]||(i[78]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[78]})]),s("details",I,[s("summary",null,[i[80]||(i[80]=s("a",{id:"RationalFunctionApproximation.poleplot-Tuple{Any}",href:"#RationalFunctionApproximation.poleplot-Tuple{Any}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.poleplot")],-1)),i[81]||(i[81]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[83]||(i[83]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">poleplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r, idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot the domain of the approximation <code>r</code> and the poles of the rational approximant. If <code>idx</code> is nonzero, it should be an index into the convergence history of <code>r</code>.</p>',2)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[82]||(i[82]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/RationalFunctionApproximation.jl#L58-L62",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[82]})]),s("details",S,[s("summary",null,[i[84]||(i[84]=s("a",{id:"RationalFunctionApproximation.poles-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}",href:"#RationalFunctionApproximation.poles-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.poles")],-1)),i[85]||(i[85]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[87]||(i[87]=s("p",null,[n("poles(r) returns the poles of the rational interpolant "),s("code",null,"r"),n(".")],-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[86]||(i[86]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L24",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[86]})]),s("details",V,[s("summary",null,[i[88]||(i[88]=s("a",{id:"RationalFunctionApproximation.poles-Union{Tuple{Barycentric{T}}, Tuple{T}} where T",href:"#RationalFunctionApproximation.poles-Union{Tuple{Barycentric{T}}, Tuple{T}} where T"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.poles")],-1)),i[89]||(i[89]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[91]||(i[91]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">poles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)</span></span></code></pre></div><p>Return the poles of the rational function <code>r</code>.</p>',2)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[90]||(i[90]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/barycentric.jl#L104-L108",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[90]})]),s("details",P,[s("summary",null,[i[92]||(i[92]=s("a",{id:"RationalFunctionApproximation.residues-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}",href:"#RationalFunctionApproximation.residues-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.residues")],-1)),i[93]||(i[93]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[95]||(i[95]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">residues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)</span></span></code></pre></div><p>Returns two vectors of the poles and residues of the rational function <code>r</code>.</p>',2)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[94]||(i[94]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L27-L31",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[94]})]),s("details",w,[s("summary",null,[i[96]||(i[96]=s("a",{id:"RationalFunctionApproximation.rewind-Tuple{RationalFunctionApproximation.Approximation, Integer}",href:"#RationalFunctionApproximation.rewind-Tuple{RationalFunctionApproximation.Approximation, Integer}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.rewind")],-1)),i[97]||(i[97]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[99]||(i[99]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rewind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r, index)</span></span></code></pre></div><p>Rewind a rational approximation to a state encountered during an iteration.</p><p><strong>Arguments</strong></p><ul><li><p><code>r::Approximation}</code>: the approximation to rewind</p></li><li><p><code>index::Integer</code>: the iteration number to rewind to</p></li></ul><p><strong>Returns</strong></p><ul><li>the rational function of the specified index (same type as input)</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> approximate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x), unit_interval)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Barycentric{Float64, Float64} rational interpolant of type (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) on the domain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path{Float64} with </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curve</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rewind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Barycentric{Float64, Float64} rational interpolant of type (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) on the domain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path{Float64} with </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curve</span></span></code></pre></div>`,8)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[98]||(i[98]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/approximate.jl#L427-L447",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[98]})]),s("details",L,[s("summary",null,[i[100]||(i[100]=s("a",{id:"RationalFunctionApproximation.roots-Tuple{Barycentric}",href:"#RationalFunctionApproximation.roots-Tuple{Barycentric}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.roots")],-1)),i[101]||(i[101]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[103]||(i[103]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">roots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)</span></span></code></pre></div><p>Return the roots (zeros) of the rational function <code>r</code>.</p>',2)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[102]||(i[102]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/barycentric.jl#L139-L143",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[102]})]),s("details",M,[s("summary",null,[i[104]||(i[104]=s("a",{id:"RationalFunctionApproximation.roots-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}",href:"#RationalFunctionApproximation.roots-Tuple{RationalFunctionApproximation.AbstractRationalInterpolant}"},[s("span",{class:"jlbinding"},"RationalFunctionApproximation.roots")],-1)),i[105]||(i[105]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[107]||(i[107]=s("p",null,[n("roots(r) returns the roots of the rational interpolant "),s("code",null,"r"),n(".")],-1)),t(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>i[106]||(i[106]=[s("a",{href:"https://github.com/complexvariables/RationalFunctionApproximation.jl/blob/9aacd446fd6fae7e8f4c8fb8e019dfa3bf0a8288/src/abstract.jl#L50",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[106]})])])}const J=l(d,[["render",N]]);export{G as __pageData,J as default};
